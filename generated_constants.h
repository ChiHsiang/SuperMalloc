#ifndef GENERATED_CONSTANTS_H
#define GENERATED_CONSTANTS_H
// Do not edit this file.  This file is automatically generated
//  from objsizes.cc

#include <stdlib.h>
#include <stdint.h>
#include <sys/types.h>
// In small and medium pages we reserve the first cache line
// (64 bytes) for a in-use bitmap.
static const uint64_t pagesize = 4096ul;
static const uint64_t log_chunksize = 21ul;
static const uint64_t chunksize = 2097152ul;

// We obtain hugepages from the operating system via mmap(2).
// By `hugepage', I mean only mmapped pages.
// By `page', I mean only a page inside a hugepage.
// Each hugepage has a bin number.
typedef uint32_t binnumber_t;
// We use a static array to keep track of the bin of each a hugepage.
//  Bins [0..first_huge_bin_number) give the size of an object.
//  Larger bin numbers B indicate the object size, coded as
//     malloc_usable_size(object) = page_size*(bin_of(object)-first_huge_bin_number;
static const struct { uint32_t object_size; uint32_t objects_per_page; } static_bin_info[] __attribute__((unused)) = {
// The first class of small objects have sizes of the form c<<k where c is 4, 5, 6 or 7.
//   objsize objects_per_page   bin   wastage
 {   8, 504},  //     0       0
 {  10, 403},  //     1       2
 {  12, 336},  //     2       0
 {  14, 288},  //     3       0
 {  16, 252},  //     4       0
 {  20, 201},  //     5      12
 {  24, 168},  //     6       0
 {  28, 144},  //     7       0
 {  32, 126},  //     8       0
 {  40, 100},  //     9      32
 {  48,  84},  //    10       0
 {  56,  72},  //    11       0
 {  64,  63},  //    12       0
 {  80,  50},  //    13      32
 {  96,  42},  //    14       0
 { 112,  36},  //    15       0
 { 128,  31},  //    16      64
 { 160,  25},  //    17      32
 { 192,  21},  //    18       0
 { 224,  18},  //    19       0
 { 256,  15},  //    20     192
// Class 2 small objects are chosen to fit as many in a page as can fit.
// Class 2 objects are always a multiple of a cache line.
 { 320,  12},  //    21       192
 { 384,  10},  //    22       192
 { 448,   9},  //    23         0
 { 576,   7},  //    24         0
 { 640,   6},  //    25       192
 { 768,   5},  //    26       192
 { 960,   4},  //    27       192
 {1344,   3},  //    28         0
 {1984,   2},  //    29        64
// large objects (page allocated):
 {1ul<<12, 1}, //    30
 {1ul<<13, 1}, //    31
 {1ul<<14, 1}, //    32
 {1ul<<15, 1}, //    33
 {1ul<<16, 1}, //    34
 {1ul<<17, 1}, //    35
 {1ul<<18, 1}, //    36
 {1ul<<19, 1}, //    37
 {1ul<<20, 1}, //    38
// huge objects (chunk allocated) start  at this size.
 {2097152, 1}};//  39
static const size_t largest_small         = 1984;
static const size_t largest_large         = 1048576;
static const size_t chunk_size            = 2097152;
static const binnumber_t first_large_bin_number = 30;
static const binnumber_t first_huge_bin_number   = 38;
struct dynamic_bin_info {
  union {
    struct {
      void *b0[505];
      void *b1[404];
      void *b2[337];
      void *b3[289];
      void *b4[253];
      void *b5[202];
      void *b6[169];
      void *b7[145];
      void *b8[127];
      void *b9[101];
      void *b10[85];
      void *b11[73];
      void *b12[64];
      void *b13[51];
      void *b14[43];
      void *b15[37];
      void *b16[32];
      void *b17[26];
      void *b18[22];
      void *b19[19];
      void *b20[16];
      void *b21[13];
      void *b22[11];
      void *b23[10];
      void *b24[8];
      void *b25[7];
      void *b26[6];
      void *b27[5];
      void *b28[4];
      void *b29[3];
    };
    void *b[3067];
  };
};
static int dynamic_bin_offset(binnumber_t bin) __attribute((pure)) __attribute__((unused)) __attribute__((warn_unused_result));
static int dynamic_bin_offset(binnumber_t bin) {
  if (0) {
    switch(bin) {
      case 0: return 0;
      case 1: return 505;
      case 2: return 909;
      case 3: return 1246;
      case 4: return 1535;
      case 5: return 1788;
      case 6: return 1990;
      case 7: return 2159;
      case 8: return 2304;
      case 9: return 2431;
      case 10: return 2532;
      case 11: return 2617;
      case 12: return 2690;
      case 13: return 2754;
      case 14: return 2805;
      case 15: return 2848;
      case 16: return 2885;
      case 17: return 2917;
      case 18: return 2943;
      case 19: return 2965;
      case 20: return 2984;
      case 21: return 3000;
      case 22: return 3013;
      case 23: return 3024;
      case 24: return 3034;
      case 25: return 3042;
      case 26: return 3049;
      case 27: return 3055;
      case 28: return 3060;
      case 29: return 3064;
    }
    abort(); // cannot get here.
  } else {
    const static int offs[]={0, 505, 909, 1246, 1535, 1788, 1990, 2159, 2304, 2431, 2532, 2617, 2690, 2754, 2805, 2848, 2885, 2917, 2943, 2965, 2984, 3000, 3013, 3024, 3034, 3042, 3049, 3055, 3060, 3064};
    return offs[bin];
  }
}
#endif
